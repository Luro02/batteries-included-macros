[include ../utils/utils.cfg]
[include ../utils/retract.cfg]

# The macro assumes that the printer is homed and already heated to the correct temperature.
[gcode_macro _EXTRUDE_LINE_TO]
description: Extrudes a line of filament from the current position to end.
gcode:
    {% set EXTRUSION_SPEED = params.EXTRUSION_SPEED|default(1500.0)|float %}
    {% set TRAVEL_SPEED = params.TRAVEL_SPEED|default(5000.0)|float %}

    {% set END_X = params.X|float %}
    {% set END_Y = params.Y|float %}

    {% set LAYER_HEIGHT = params.LAYER_HEIGHT|default(0.2)|float %}
    {% set FLOW = params.FLOW|default(1.0)|float %}

    # it does not seem possible to obtain the values for nozzle_diameter and filament_diameter that are set in the printer.cfg
    # see https://github.com/Klipper3d/klipper/issues/797
    # and https://github.com/Klipper3d/klipper/pull/4123
    {% set NOZZLE_DIAMETER = params.NOZZLE_DIAMETER|default(0.4)|float %}
    {% set FILAMENT_DIAMETER = params.FILAMENT_DIAMETER|default(1.75)|float %}

    {% set HEIGHT = params.HEIGHT|default(0.0)|float %}
    {% set Z_HEIGHT = HEIGHT + LAYER_HEIGHT %}

    # get the current position
    {% set START_X = printer.gcode_move.gcode_position.x %}
    {% set START_Y = printer.gcode_move.gcode_position.y %}

    # distance between two points (x1, y1), (x2, y2) is
    # sqrt((x2 - x1)^2 + (y2 - y1)^2)
    {% set DISTANCE = ((END_X - START_X)**2 + (END_Y - START_Y)**2)**(1/2) %}

    # calculate the amount to extrude, see https://3dprinting.stackexchange.com/questions/6289
    {% set E = (4.0 * LAYER_HEIGHT * FLOW * NOZZLE_DIAMETER * DISTANCE)/(3.14159265359 * FILAMENT_DIAMETER**2) %}

    { action_respond_info("Extruding line from ({}, {}) to ({}, {})".format(START_X, START_Y, END_X, END_Y)) }
    { action_respond_info("with Distance = {} E = {} Z_HEIGHT = {} FLOW = {}".format(DISTANCE, E, Z_HEIGHT, FLOW)) }

    SAVE_GCODE_STATE NAME=_extrude_line_state

    # reset extruder
    G92 E0
    # absolute positioning
    G90

    # move to start position
    G0 F{TRAVEL_SPEED} X{START_X} Y{START_Y} Z{Z_HEIGHT}

    # draw line:
    G1 F{EXTRUSION_SPEED} X{END_X} Y{END_Y} E{E}

    RESTORE_GCODE_STATE NAME=_extrude_line_state

# Prints a pattern like this on the bed.
#
#  ________________________
# |    |    |    |    |    |
# |____|____|____|____|____|
# |    |    |    |    |    |
# |____|____|____|____|____|
# |    |    |    |    |    |
# |____|____|____|____|____|
# |    |    |    |    |    |
# |____|____|____|____|____|
# |    |    |    |    |    |
# |____|____|____|____|____|
#
# Usage:
#     G26 [H<Temp>] [B<Temp>]
# Parameters:
# [H<Temp>] Extruder temperature, by default 205°C
# [B<Temp>] Bed temperature, by default 60°C
#
# https://marlinfw.org/docs/gcode/G026.html
[gcode_macro G26]
gcode:
    _PARSE_MARLIN_PARAMS TARGET=_G26 ARGS='{rawparams}'

# Draws a square with X, Y as bottom left corner.
#        ____
#       |    |
#       |____|
# (x, y)
[gcode_macro _DRAW_SQUARE]
gcode:
    {% set TRAVEL_SPEED = params.TRAVEL_SPEED|default(5000.0)|float %}
    {% set X = params.X|float %}
    {% set Y = params.Y|float %}
    {% set HEIGHT = params.HEIGHT|float %}
    {% set WIDTH = params.WIDTH|float %}

    SAVE_GCODE_STATE NAME=_DRAW_SQUARE_state

    # Reset extruder
    G92 E0

    # Absolute positioning
    G90

    # move to start position
    G1 F{TRAVEL_SPEED} X{X} Y{Y} Z0.2

    # draw the square:
    _EXTRUDE_LINE_TO X={X} Y={Y + HEIGHT}
    _EXTRUDE_LINE_TO X={X + WIDTH} Y={Y + HEIGHT}
    _EXTRUDE_LINE_TO X={X + WIDTH} Y={Y}
    _EXTRUDE_LINE_TO X={X} Y={Y}

    # move inside the square
    _RETRACT
    G0 F{TRAVEL_SPEED} Z1.0

    # update variables for drawing second inner square
    {% set X = X + 0.3 %}
    {% set Y = Y + 0.3 %}
    {% set WIDTH = WIDTH - 0.3 %}
    {% set HEIGHT = HEIGHT - 0.3 %}

    # travel to start
    G0 F{TRAVEL_SPEED} X{X} Y{Y} Z0.2
    _UNRETRACT

    # draw the square
    _EXTRUDE_LINE_TO X={X} Y={Y + HEIGHT}
    _EXTRUDE_LINE_TO X={X + WIDTH} Y={Y + HEIGHT}
    _EXTRUDE_LINE_TO X={X + WIDTH} Y={Y}
    _EXTRUDE_LINE_TO X={X} Y={Y}

    RESTORE_GCODE_STATE NAME=_DRAW_SQUARE_state


# References:
# - https://github.com/mriscoc/Ender3V2S1/blob/4cc028a7c5ef277c36f2bc9fa619b6ec582105cb/Marlin/src/gcode/bedlevel/G26.cpp#L470
# - https://github.com/MarlinFirmware/Marlin/issues/9430
# - https://marlinfw.org/docs/gcode/G026.html
[gcode_macro _G26]
description: Print mesh validation pattern.
gcode:
    {% set EXTRUDER_TEMP = params.H|default(205)|float %}
    {% set BED_TEMP = params.B|default(60)|float %}
    {% set FILAMENT_DIAMETER = params.F|default(1.75)|float %}
    {% set LAYER_HEIGHT = params.L|default(0.2)|float %}
    {% set NOZZLE_DIAMETER = params.S|default(0.4)|float %}

    {% set TRAVEL_SPEED = 5000.0|float %}

    # TODO: is it possible to get mesh size from config?
    {% set GRID_WIDTH = 5|int %}
    {% set GRID_HEIGHT = 5|int %}

    {% set MAX_X = printer.toolhead.axis_maximum.x|float %}
    {% set MAX_Y = printer.toolhead.axis_maximum.y|float %}

    {% set MIN_X = 2.0|float %}
    {% set MIN_Y = 2.0|float %}

    { action_respond_info("Starting bed mesh calibration print") }

    SAVE_GCODE_STATE NAME=_G26_state

    # start heating:
    M104 S{EXTRUDER_TEMP}
    M140 S{BED_TEMP}

    # home if needed
    G28 O

    # Reset extruder
    G92 E0

    # Absolute positioning
    G90

    # Park at origin
    G1 F{TRAVEL_SPEED} X0.0 Y0.0 Z10.0

    # wait for extruder/bed to reach target temp
    M109 S{EXTRUDER_TEMP}
    M190 S{BED_TEMP}

    # # move to start position
    # G1 F{TRAVEL_SPEED} X20.0 Y20.0 Z0.2

    {% set SQUARE_WIDTH = (MAX_X - MIN_X)/GRID_WIDTH %}
    {% set SQUARE_HEIGHT = (MAX_Y - MIN_Y)/GRID_HEIGHT %}
    {% set INSET = 0.2|float %}

    # inset, so the printer does not draw outside of the square
    {% set WIDTH = SQUARE_WIDTH - 2 * INSET %}
    {% set HEIGHT = SQUARE_HEIGHT - 2 * INSET %}

    { action_respond_info("Square Dimensions: WIDTH={} HEIGHT={} INSET={}".format(SQUARE_WIDTH, SQUARE_HEIGHT, INSET)) }

    SIMPLE_PURGE_LINE

    _RETRACT
    {% for i in range(0, GRID_WIDTH) %}
        {% set CURRENT_X = MIN_X + i * SQUARE_WIDTH + INSET %}
        {% set CURRENT_Y = MIN_Y + 0 * SQUARE_HEIGHT + INSET %}

        { action_respond_info("Drawing Square at ({}, {})".format(CURRENT_X, CURRENT_Y)) }

        # lift nozzle and move to square point:
        G0 F{TRAVEL_SPEED} Z1.0
        G0 X{CURRENT_X} Y{CURRENT_Y}

        _UNRETRACT
        _DRAW_SQUARE X={CURRENT_X} Y={CURRENT_Y} WIDTH={WIDTH} HEIGHT={HEIGHT}
        _RETRACT
    {% endfor %}

    # park printer
    G0 X0 Y0 Z50 F1500

    RESTORE_GCODE_STATE NAME=_G26_state
