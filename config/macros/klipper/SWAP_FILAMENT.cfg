[include LOAD_FILAMENT.cfg]
[include UNLOAD_FILAMENT.cfg]

[include ../utils/D117.cfg]
[include ../utils/utils.cfg]


[gcode_macro SWAP_FILAMENT]
description: Change filament.
    Usage: SWAP_FILAMENT [EXTRUDER_TEMP=<temp>] [BED_TEMP=<temp>] [X=<pos>] [Y=<pos>] [Z=<pos>]

    Parameters:
     - [EXTRUDER_TEMP] Temperature of the extruder for purging filament, by default 180°C.
     - [BED_TEMP] Temperature of the bed for purging filament, by default 0°C.
     - [X] X position for filament change
     - [Y] Y position for filament change
     - [Z] Z relative lift for filament change position
variable_extruder_temp: 210.0
variable_bed_temp: 60.0
variable_is_active: False
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default([printer['extruder'].target, 180.0] | max)|float %}
    {% set BED_TEMP = params.BED_TEMP|default(printer['heater_bed'].target)|float %}

    { action_respond_info("SWAP_FILAMENT EXTRUDER_TEMP={} BED_TEMP={}".format(EXTRUDER_TEMP, BED_TEMP)) }

    SAVE_GCODE_STATE NAME=_swap_filament_state

    # store the extruder and bed target (to later restore them if the heaters have been turned off)
    SET_GCODE_VARIABLE MACRO=SWAP_FILAMENT VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=SWAP_FILAMENT VARIABLE=bed_temp VALUE={BED_TEMP}
    # indicate that a swap is currently active:
    SET_GCODE_VARIABLE MACRO=SWAP_FILAMENT VARIABLE=is_active VALUE={true}

    # printer has to be homed for parking to work
    _HOME_AND_PREHEAT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}

    # use absolute positioning
    G90

    # if a Z offset has been specified, move there
    {% if params.Z is defined %}
        {% set CURRENT_POSITION = printer.gcode_move.position.z %}
        _LOG_INFO MSG='Using Z={CURRENT_POSITION} as position'
        {% set Z_MIN = CURRENT_POSITION + (params.Z|float) %}
        _LOG_INFO MSG='Using Z_MIN={Z_MIN}'
    {% endif %}

    {% set PAUSE_ARGUMENTS = [] %}

    {% if params.X is defined %}
        {% set _ = PAUSE_ARGUMENTS.append("X={}".format(params.X)) %}
    {% endif %}

    {% if params.Y is defined %}
        {% set _ = PAUSE_ARGUMENTS.append("Y={}".format(params.Y)) %}
    {% endif %}

    {% if Z_MIN is defined %}
        {% set _ = PAUSE_ARGUMENTS.append("Z_MIN={}".format(Z_MIN)) %}
    {% endif %}

    { action_respond_info("PAUSE {}".format(PAUSE_ARGUMENTS|join(" "))) }

    # pause the print/park the printer:
    PAUSE { PAUSE_ARGUMENTS|join(" ") }

    # unload filament:
    UNLOAD_FILAMENT EXTRUDER_TEMP={EXTRUDER_TEMP}

    _LOG_INFO MSG="Printer paused for filament change. Call `RESUME` macro, to continue print after the filament has been changed."

    # TODO: read this based on config, what if the sensor uses a different name?
    SET_FILAMENT_SENSOR SENSOR=e0_sensor ENABLE=0

[gcode_macro RESUME]
rename_existing: _RESUME_BASE_BI
gcode:
    {% set IS_ACTIVE = printer["gcode_macro SWAP_FILAMENT"].is_active %}

    {% if IS_ACTIVE %}
        {% set EXTRUDER_TEMP = printer["gcode_macro SWAP_FILAMENT"].extruder_temp %}
        {% set BED_TEMP = printer["gcode_macro SWAP_FILAMENT"].bed_temp %}

        SET_GCODE_VARIABLE MACRO=SWAP_FILAMENT VARIABLE=is_active VALUE={false}

        # enable stepper, which has been disabled by M702
        M17 E

        # enable filament sensor:
        SET_FILAMENT_SENSOR SENSOR=e0_sensor ENABLE=1

        LOAD_FILAMENT EXTRUDER_TEMP={EXTRUDER_TEMP}

        _LOG_INFO MSG='Resuming print with EXTRUDER_TEMP={EXTRUDER_TEMP} and BED_TEMP={BED_TEMP}.'

        RESTORE_GCODE_STATE NAME=_swap_filament_state
    {% endif %}

    # call the original resume macro:
    _RESUME_BASE_BI

[gcode_macro SWAP_RESUME]
description: Resume a print after swapping filament.
gcode:
    RESUME {rawparams}
